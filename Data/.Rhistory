xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=20)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(20, 4))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=18)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(18, 4))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=15)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(15, 4))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 4))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=15)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 4))
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 15))
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 5))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 1))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 2))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 4, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# Question 3
time = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180)
length = c(0.6, 1.8, 2.9, 4, 5, 6.1, 7.9, 10.1, 10.9, 12.7, 14.4, 16.6, 18.1, 19.9, 21, 23.4, 24.7, 27.8)
# attemps for data transformation
# plot(time, length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time^2, log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time^2, length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(sqrt(time), length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(-(1/time), log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, 1/log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(-(1/time), 1/log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, log(length, base = 2), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(log(time, base = 2), length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# best data transformation
transform_df <- data.frame(t = log(time, base = 2), l = log(length))
# draw best fit line on the transformed data
fit = lm(l ~ t, transform_df)
plot(transform_df$t, transform_df$l, main="log2(Time (min)) Vs ln(Length (cm))",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
abline(fit)
# check for goodness of model
par(mfrow=c(2, 2))
plot(fit)
summary(fit)
# use the original data on the model, then plot it back to the same original plot with the original data
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(t = transform_df$t)))
plot(time, length, main="Length (cm) Vs Time (min)",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
points(time, predicted_values, pch = 3, col = "red")
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# use the original data on the model, then plot it back to the same original plot with the original data
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(t = transform_df$t)))
plot(time, length, main="Length (cm) Vs Time (min)",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
points(time, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# Question 2
temperature = c(273, 283, 293, 303, 313, 323, 333, 343, 353, 363, 373)
pressure = c(4.6, 9.2, 17.5, 31.8, 55.3, 92.5, 149.4, 233.7, 355.1, 525.8, 760.0)
# 2A
plot(temperature, pressure, main="Temperature (K) Vs Vapor Pressure (mm HG)",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
# 2B
data <- data.frame(temp = -(1/temperature), pres = log(pressure))
# 2C
par(mfrow=c(1,1))
fit = lm(pres ~ temp, data)
plot(data$temp, data$pres, main="log(Temperature (K)) Vs -1 / Vapor Pressure (mm HG)",
xlab="log(Temperature (K))", ylab="-1 / Vapor Pressure (mm HG)", pch=19)
abline(fit)
# 2D
summary(fit)
par(mfrow=c(2,2))
plot(fit)
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# use the original data on the model, then plot it back to the same original plot with the original data
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(t = transform_df$t)))
plot(time, length, main="Length (cm) Vs Time (min)",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
points(time, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# Question 3
time = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180)
length = c(0.6, 1.8, 2.9, 4, 5, 6.1, 7.9, 10.1, 10.9, 12.7, 14.4, 16.6, 18.1, 19.9, 21, 23.4, 24.7, 27.8)
# attemps for data transformation
# plot(time, length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time^2, log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time^2, length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(sqrt(time), length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(-(1/time), log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, 1/log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(-(1/time), 1/log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, log(length, base = 2), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(log(time, base = 2), length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# best data transformation
transform_df <- data.frame(t = log(time, base = 2), l = log(length))
# draw best fit line on the transformed data
fit = lm(l ~ t, transform_df)
plot(transform_df$t, transform_df$l, main="log2(Time (min)) Vs ln(Length (cm))",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
abline(fit)
# check for goodness of model
par(mfrow=c(2, 2))
plot(fit)
summary(fit)
# use the original data on the model, then plot it back to the same original plot with the original data
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(t = transform_df$t)))
plot(time, length, main="Length (cm) Vs Time (min)",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
points(time, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# use the original data on the model, then plot it back to the same original plot with the original data
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(t = transform_df$t)))
plot(time, length, main="Length (cm) Vs Time (min)",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
points(time, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# Question 3
time = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180)
length = c(0.6, 1.8, 2.9, 4, 5, 6.1, 7.9, 10.1, 10.9, 12.7, 14.4, 16.6, 18.1, 19.9, 21, 23.4, 24.7, 27.8)
# attemps for data transformation
# plot(time, length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time^2, log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time^2, length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(sqrt(time), length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(-(1/time), log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, 1/log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(-(1/time), 1/log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, log(length, base = 2), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(log(time, base = 2), length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# best data transformation
transform_df <- data.frame(t = log(time, base = 2), l = log(length))
# draw best fit line on the transformed data
fit = lm(l ~ t, transform_df)
plot(transform_df$t, transform_df$l, main="log2(Time (min)) Vs ln(Length (cm))",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
abline(fit)
# check for goodness of model
par(mfrow=c(2, 2))
plot(fit)
summary(fit)
# use the original data on the model, then plot it back to the same original plot with the original data
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(t = transform_df$t)))
plot(time, length, main="Length (cm) Vs Time (min)",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
points(time, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# Question 2
temperature = c(273, 283, 293, 303, 313, 323, 333, 343, 353, 363, 373)
pressure = c(4.6, 9.2, 17.5, 31.8, 55.3, 92.5, 149.4, 233.7, 355.1, 525.8, 760.0)
# 2A
plot(temperature, pressure, main="Temperature (K) Vs Vapor Pressure (mm HG)",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
# 2B
data <- data.frame(temp = -(1/temperature), pres = log(pressure))
# 2C
par(mfrow=c(1,1))
fit = lm(pres ~ temp, data)
plot(data$temp, data$pres, main="log(Temperature (K)) Vs -1 / Vapor Pressure (mm HG)",
xlab="log(Temperature (K))", ylab="-1 / Vapor Pressure (mm HG)", pch=19)
abline(fit)
# 2D
summary(fit)
par(mfrow=c(2,2))
plot(fit)
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
temperature = c(273, 283, 293, 303, 313, 323, 333, 343, 353, 363, 373)
pressure = c(4.6, 9.2, 17.5, 31.8, 55.3, 92.5, 149.4, 233.7, 355.1, 525.8, 760.0)
# 2A
plot(temperature, pressure, main="Temperature (K) Vs Vapor Pressure (mm HG)",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
# 2B
data <- data.frame(temp = -(1/temperature), pres = log(pressure))
# 2C
par(mfrow=c(1,1))
fit = lm(pres ~ temp, data)
plot(data$temp, data$pres, main="log(Temperature (K)) Vs -1 / Vapor Pressure (mm HG)",
xlab="log(Temperature (K))", ylab="-1 / Vapor Pressure (mm HG)", pch=19)
abline(fit)
# 2D
summary(fit)
par(mfrow=c(2,2))
plot(fit)
# 2E
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(temp = data$temp)))
plot(temperature, pressure, main="Temperature Vs Vapor Pressure",
xlab="Temperature (K) ", ylab="Vapor Pressure (mm HG)", pch=19)
points(temperature, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
# Question 3
time = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180)
length = c(0.6, 1.8, 2.9, 4, 5, 6.1, 7.9, 10.1, 10.9, 12.7, 14.4, 16.6, 18.1, 19.9, 21, 23.4, 24.7, 27.8)
# attemps for data transformation
# plot(time, length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time^2, log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time^2, length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(sqrt(time), length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(-(1/time), log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, 1/log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(-(1/time), 1/log(length), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(time, log(length, base = 2), main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# plot(log(time, base = 2), length, main="Time Vs Length", xlab="Time", ylab="Length", pch=19)
# best data transformation
transform_df <- data.frame(t = log(time, base = 2), l = log(length))
# draw best fit line on the transformed data
fit = lm(l ~ t, transform_df)
plot(transform_df$t, transform_df$l, main="log2(Time (min)) Vs ln(Length (cm))",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
abline(fit)
# check for goodness of model
par(mfrow=c(2, 2))
plot(fit)
summary(fit)
# use the original data on the model, then plot it back to the same original plot with the original data
par(mfrow=c(1,1))
predicted_values <- exp(predict(fit, newdata = data.frame(t = transform_df$t)))
plot(time, length, main="Length (cm) Vs Time (min)",
xlab="log2(Time (min))", ylab="ln(Length (cm))", pch=19)
points(time, predicted_values, pch = 3, col = "red", lwd = 2)
legend("topleft", legend = c("original points", "predicted points"), bty = "n",
lwd = 2, cex = 1.2, col = c("black", "red"), lty = c(NA, NA), pch = c(19, 3))
require(rpart)
require(rattle)
rm(list = ls())
df <- read.csv("A:/Wong Tiong Kiat/Documents/Visual Studio 2017/Projects/DarkLesion/DarkLesion/images/output/raw_features.csv")
fit <- rpart(label ~ ., method="class", data=df)
test_df <- df[1:18]
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
require(rpart)
require(rattle)
rm(list = ls())
df <- read.csv("A:/Wong Tiong Kiat/Documents/Visual Studio 2017/Projects/DarkLesion/DarkLesion/images/output/raw_features.csv")
df <- read.csv("A:/Wong Tiong Kiat/Desktop/temp.csv")
fit <- rpart(label ~ ., method="class", data=df)
test_df <- df[1:18]
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
preds <- predict(fit, test_df, type = "c")
table(df$label, preds)
# plot tree
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
asRules(fit)
require(rpart)
require(rattle)
rm(list = ls())
df <- read.csv("A:/Wong Tiong Kiat/Desktop/University/Final Year Project/haemorrhages analysis/raw_features.csv")
fit <- rpart(label ~ ., method="class", data=df)
test_df <- df[1:18]
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
preds <- predict(fit, test_df, type = "c")
table(df$label, preds)
# plot tree
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
asRules(fit)
require(rpart)
require(rattle)
rm(list = ls())
df <- read.csv("A:/Wong Tiong Kiat/Desktop/ha_features.csv")
fit <- rpart(label ~ ., method="class", data=df)
test_df <- df[1:18]
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
preds <- predict(fit, test_df, type = "c")
table(df$label, preds)
# plot tree
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
asRules(fit)
require(rpart)
require(rattle)
rm(list = ls())
df <- read.csv("A:/Wong Tiong Kiat/Desktop/ma_features_new.csv")
fit <- rpart(label ~ ., method="class", data=df)
test_df <- df[1:18]
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
preds <- predict(fit, test_df, type = "c")
table(df$label, preds)
# plot tree
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
asRules(fit)
require(rpart)
require(rattle)
rm(list = ls())
df <- read.csv("A:/Wong Tiong Kiat/Desktop/ma_features_new.csv")
fit <- rpart(label ~ ., method="class", data=df)
test_df <- df[1:18]
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
preds <- predict(fit, test_df, type = "c")
table(df$label, preds)
require(rpart)
require(rattle)
rm(list = ls())
df <- read.csv("A:/Wong Tiong Kiat/Desktop/ma_features_new.csv")
fit <- rpart(label ~ ., method="class", data=df)
test_df <- df[1:18]
printcp(fit) # display the results
plotcp(fit) # visualize cross-validation results
summary(fit) # detailed summary of splits
preds <- predict(fit, test_df, type = "c")
table(df$label, preds)
# plot tree
plot(fit, uniform=TRUE,
main="Regression Tree for Mileage ")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
asRules(fit)
setwd('./Raw Data/')
setwd("./Raw Data")
setwd(".\Raw Data")
setwd(".\\Raw Data")
read.csv("amazon_cells_labelled.tsv")
read.csv("amazon_cells_labelled.tsv")
?read.csv
read.csv("./amazon_cells_labelled.tsv")
setwd(".")
?read.csv
read.csv("./amazon_cells_labelled.tsv")
read.csv("amazon_cells_labelled.tsv")
read.delim("amazon_cells_labelled.tsv")
read.delim("./amazon_cells_labelled.tsv")
setwd(".")
getwd()
setwd("A:\ProgramFiles\XAMPP\htdocs\data_viz\Data")
setwd("A:/ProgramFiles/XAMPP/htdocs/data_viz/Data")
read.delim("./amazon_cells_labelled.tsv")
amazon <- read.delim("amazon_cells_labelled.tsv")
View(amazon)
View(amazon)
amazon <- read.csv("amazon_cells_labelled.tsv", sep ="\t", header = FALSE)
amazon <- read.csv("amazon_cells_labelled.tsv", sep ="\t", quote="", header = FALSE)
?rep
nrow(amazon)
amazon$Source <- rep("Amazon", nrow(amazon))
View(amazon)
View(amazon)
names(amazon)
setwd("A:/ProgramFiles/XAMPP/htdocs/data_viz/Data")
combine_src <- function(file_name, source_name)
{
df <- read.csv(file_name, sep ="\t", quote="", header = FALSE)
df$v3 <- rep(source_name, nrow(amazon))
names(df) <- c("text", "sentiment", "source")
}
df <- rbind(combine_src("amazon_cells_labelled.tsv", "amazon"), combine_src("imdb_labelled.tsv", "imbd"))
df <- rbind(df, combine_src("yelp_labelled.tsv", "yelp"))
View(amazon)
View(df)
amazon_df <- combine_src("amazon_cells_labelled.tsv", "amazon")
imbd_df <- combine_src("imdb_labelled.tsv", "imbd")
yelp_df <- combine_src("yelp_labelled.tsv", "yelp")
setwd("A:/ProgramFiles/XAMPP/htdocs/data_viz/Data")
combine_src <- function(file_name, source_name)
{
df <- read.csv(file_name, sep ="\t", quote="", header = FALSE)
df$v3 <- rep(source_name, nrow(amazon))
names(df) <- c("text", "sentiment", "source")
df
}
amazon_df <- combine_src("amazon_cells_labelled.tsv", "amazon")
imbd_df <- combine_src("imdb_labelled.tsv", "imbd")
yelp_df <- combine_src("yelp_labelled.tsv", "yelp")
df <- rbind(amazon_df, rbind(imbd_df, yelp_df))
write.csv(df, "combined_data.csv")
?write.csv
write.csv(df, "combined_data.csv", row.names = FALSE)
setwd("A:/ProgramFiles/XAMPP/htdocs/data_viz/Data")
combine_src <- function(file_name, source_name)
{
df <- read.csv(file_name, sep ="\t", quote="", header = FALSE)
df$v3 <- rep(source_name, nrow(amazon))
names(df) <- c("text", "sentiment", "source")
df
}
amazon_df <- combine_src("amazon_cells_labelled.tsv", "amazon")
imbd_df <- combine_src("imdb_labelled.tsv", "imbd")
yelp_df <- combine_src("yelp_labelled.tsv", "yelp")
df <- rbind(amazon_df, rbind(imbd_df, yelp_df))
write.csv(df, "data.csv", row.names = FALSE)
